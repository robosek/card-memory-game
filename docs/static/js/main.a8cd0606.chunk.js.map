{"version":3,"sources":["pictures/back.png","pictures sync /^/.*$","pictures/title.png","pictures/0.png","pictures/1.png","pictures/10.png","pictures/11.png","pictures/2.png","pictures/3.png","pictures/4.png","pictures/5.png","pictures/6.png","pictures/7.png","pictures/8.png","pictures/9.png","overmind/state.ts","overmind/operators.ts","utils/keyGenerator.ts","utils/shuffle.ts","overmind/actions.ts","overmind/index.ts","overmind/onInitialize.ts","components/Card.tsx","components/RadioButton.tsx","components/Panel.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./0.png","./1.png","./10.png","./11.png","./2.png","./3.png","./4.png","./5.png","./6.png","./7.png","./8.png","./9.png","./back.png","./title.png","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","CardState","paths","generateKey","concat","Date","now","Math","random","toString","substr","clearUnderVerification","mutate","_ref10","state","cardsUnderVerification","generateShuffledCards","_ref13","cards","i","numberOfCards","push","value","Unrevelead","picturePath","array","length","j","floor","_ref","shuffle","startNewGame","pipe","clearTotalScore","clearMissedChecks","_ref12","revealedCards","_ref16","missedChecks","_ref17","totalScore","changeCardsNumber","_ref14","cardsNumber","tryCard","_ref2","key","findIndex","card","index","objectSpread","UnderVerification","toConsumableArray","when","_ref7","true","_ref18","_ref3","filter","forEach","Revelead","false","_ref15","_ref5","Blocked","wait","_ref6","_ref4","_ref8","_state$cardsUnderVeri","slicedToArray","card1","card2","noop","_ref9","action","_ref11","alert","config","onInitialize","actions","gameLevel","1","2","3","4","overmind","createOvermind","useOvermind","createHook","Card","react","className","onClick","src","require","alt","RadioButton","_useOvermind","onRadioChanged","event","number","target","parseInt","type","name","onChange","checked","Panel","RadioButton_RadioButton","readOnly","placeholder","App","overmind_react_es","Panel_Panel","Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8cd0606.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.5676d44c.png\";","var map = {\n\t\"./0.png\": 29,\n\t\"./1.png\": 30,\n\t\"./10.png\": 31,\n\t\"./11.png\": 32,\n\t\"./2.png\": 33,\n\t\"./3.png\": 34,\n\t\"./4.png\": 35,\n\t\"./5.png\": 36,\n\t\"./6.png\": 37,\n\t\"./7.png\": 38,\n\t\"./8.png\": 39,\n\t\"./9.png\": 40,\n\t\"./back.png\": 10,\n\t\"./title.png\": 17\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/title.e2f9fe53.png\";","module.exports = __webpack_public_path__ + \"static/media/0.ed4e0a00.png\";","module.exports = __webpack_public_path__ + \"static/media/1.ee8d598d.png\";","module.exports = __webpack_public_path__ + \"static/media/10.5c33040a.png\";","module.exports = __webpack_public_path__ + \"static/media/11.672e7166.png\";","module.exports = __webpack_public_path__ + \"static/media/2.6899ae52.png\";","module.exports = __webpack_public_path__ + \"static/media/3.1ae57d7f.png\";","module.exports = __webpack_public_path__ + \"static/media/4.957f67fe.png\";","module.exports = __webpack_public_path__ + \"static/media/5.542908c1.png\";","module.exports = __webpack_public_path__ + \"static/media/6.334f6eb5.png\";","module.exports = __webpack_public_path__ + \"static/media/7.2e891296.png\";","module.exports = __webpack_public_path__ + \"static/media/8.f22594e0.png\";","module.exports = __webpack_public_path__ + \"static/media/9.2f50d554.png\";","export interface Dictionary<T> {\r\n  [Key: string]: T;\r\n}\r\n\r\nexport type State = {\r\n  numberOfCards: number\r\n  revealedCards: Array<Card>\r\n  cardsUnderVerification: Array<Card>\r\n  cards: Array<Card>,\r\n  missedChecks:number,\r\n  totalScore: number,\r\n  gameLevel: Dictionary<number>\r\n}\r\n\r\nexport enum CardState{\r\n  Revelead,\r\n  Unrevelead,\r\n  UnderVerification,\r\n  Blocked\r\n}\r\n\r\nexport type Card = {\r\n  id: string\r\n  value: number\r\n  state: CardState\r\n  picturePath: string\r\n}\r\n\r\nexport const state: State = {\r\n  numberOfCards: 12,\r\n  revealedCards: [],\r\n  cards: [],\r\n  cardsUnderVerification: [],\r\n  missedChecks: 0,\r\n  totalScore: 0,\r\n  gameLevel:{ \"1\":12, \"2\":16, \"3\":20, \"4\":22 }\r\n}","import { Operator, when, mutate, map, action, pipe } from 'overmind'\r\nimport { CardState, Card } from './state';\r\nimport { shuffle, generateKey } from '../utils'\r\n\r\ntype Path = {\r\n    true: Operator\r\n    false: Operator\r\n}\r\n\r\nexport const setUnderVerification: () => Operator<number,number> = () => \r\n    mutate(({ state }, index) => {\r\n        state.cards[index] = { ...state.cards[index], state: CardState.UnderVerification } \r\n        state.cardsUnderVerification = [...state.cardsUnderVerification, state.cards[index]]\r\n    })\r\n\r\nexport const getCardIndexByKey: () => Operator<string,number> = () => \r\n    map(({ state }, key) => {\r\n        return state.cards.findIndex(card => card.id === key)\r\n    })\r\n\r\nexport const setAllUnderVerificationToRevelead: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n       const cards = state.cards.filter(card => card.state === CardState.UnderVerification)\r\n       cards.forEach(card => card.state = CardState.Revelead)\r\n       state.revealedCards = [...state.revealedCards, ...cards]\r\n    }\r\n)\r\n\r\nexport const setAllUnderVerificationToUnrevelead: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n       const cards = state.cards.filter(card => card.state === CardState.UnderVerification)\r\n       cards.forEach(card => card.state = CardState.Unrevelead)\r\n    }\r\n)\r\n\r\nexport const setAllUnreveleadToBlocked: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n       const cards = state.cards.filter(card => card.state === CardState.Unrevelead)\r\n       cards.forEach(card => card.state = CardState.Blocked)\r\n    }\r\n)\r\n\r\nexport const setAllBlockedToUnrevelead: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n       const cards = state.cards.filter(card => card.state === CardState.Blocked)\r\n       cards.forEach(card => card.state = CardState.Unrevelead)\r\n    }\r\n)\r\n\r\nexport const canVerify: (paths: Path) => Operator = (paths) => when(\r\n    ( {state} ) => state.cardsUnderVerification.length === 2, paths \r\n)\r\n\r\nexport const cardsAreEqual: (paths: Path) => Operator = (paths: Path) => when(\r\n    ( {state} ) => {\r\n        let [card1, card2] = state.cardsUnderVerification\r\n        return card1.value === card2.value\r\n    }, paths \r\n)\r\n\r\nexport const allCardsAreRevealed: (paths: Path) => Operator = (paths: Path) => when(\r\n    ( {state} ) => state.revealedCards.length === state.numberOfCards, paths\r\n)\r\n\r\nexport const clearUnderVerification: () => Operator = () => mutate(\r\n    (({ state }) => state.cardsUnderVerification = [])\r\n)\r\n\r\nexport const congratsAlert: () => Operator = () => action(\r\n    ( {state} ) => {\r\n        alert(`Congratulations! Your score is ${state.totalScore} points.`)\r\n    }\r\n)\r\n\r\nexport const clearGameState: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n        state.revealedCards = []\r\n        state.cardsUnderVerification = []\r\n    }\r\n)\r\n\r\nexport const generateShuffledCards: () => Operator = () => mutate(\r\n    ({ state }) => {\r\n        const cards:Array<Card> = []\r\n\r\n        for (let i = 0; i < (state.numberOfCards / 2); i++) \r\n        {\r\n            cards.push({id: generateKey(), value: i, state: CardState.Unrevelead, picturePath: `${i}.png`})\r\n            cards.push({id: generateKey(), value: i, state: CardState.Unrevelead, picturePath: `${i}.png`})\r\n        }\r\n\r\n        state.cards =  shuffle(cards);\r\n    }\r\n)\r\n\r\nexport const startNewGame: () => Operator = () => pipe(\r\n    clearTotalScore(),\r\n    clearMissedChecks(),\r\n    clearGameState(),\r\n    generateShuffledCards()\r\n)\r\n\r\nexport const setNewCardsNumber: () => Operator<number> = () => mutate(\r\n    ( {state}, cardsNumber) => {\r\n        state.numberOfCards = cardsNumber \r\n    }\r\n)\r\n\r\nexport const incrementMissedChecks: () => Operator = () => mutate(\r\n    ( {state} ) => state.missedChecks += 1\r\n)\r\n\r\nexport const clearMissedChecks: () => Operator = () => mutate(\r\n    ( {state} ) => state.missedChecks = 0\r\n)\r\n\r\nexport const clearTotalScore: () => Operator = () => mutate(\r\n    ( {state} ) => state.totalScore = 0\r\n)\r\n\r\nexport const countScore: () => Operator = () => mutate(\r\n    ( {state} ) => {\r\n        const missedChecks = state.missedChecks\r\n        \r\n        if(missedChecks === 0)\r\n            state.totalScore += 10\r\n        else if(missedChecks >= 1 && missedChecks <=3)\r\n            state.totalScore +=5\r\n        else if(missedChecks > 3 && missedChecks < 10)\r\n            state.totalScore +=1\r\n        else \r\n            state.totalScore +=0\r\n    }\r\n)\r\n\r\n","export const generateKey = () => {\r\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n}\r\n","import { Card } from '../overmind/state';\r\n\r\nexport const shuffle = (array: Array<Card>) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n","import { pipe, Operator, noop, wait } from 'overmind'\r\nimport * as o from './operators'\r\n\r\nconst showMissedCardsTimeMs = 600\r\n\r\nexport const startNewGame: Operator = o.startNewGame()\r\n\r\nexport const changeCardsNumber: Operator<number> = pipe(\r\n    o.setNewCardsNumber(),\r\n    o.startNewGame()\r\n) \r\n\r\nexport const tryCard : Operator<string> = pipe(\r\n    o.getCardIndexByKey(),\r\n    o.setUnderVerification(),\r\n    o.canVerify({\r\n        true: o.cardsAreEqual({\r\n            true:pipe(\r\n                o.countScore(),\r\n                o.clearMissedChecks(),\r\n                o.setAllUnderVerificationToRevelead(), \r\n                o.clearUnderVerification()\r\n            ),\r\n            false:pipe(\r\n                o.incrementMissedChecks(),\r\n                o.setAllUnreveleadToBlocked(),\r\n                wait(showMissedCardsTimeMs),\r\n                o.setAllBlockedToUnrevelead(),\r\n                o.setAllUnderVerificationToUnrevelead(), \r\n                o.clearUnderVerification()\r\n            )\r\n        }),\r\n        false: noop()\r\n    }),\r\n    o.allCardsAreRevealed({\r\n        true:pipe(\r\n            wait(200),\r\n            o.congratsAlert(),\r\n            o.startNewGame()\r\n        ),\r\n        false:noop()\r\n    })\r\n)","import { IConfig, createOvermind } from 'overmind'\r\nimport { createHook } from 'overmind-react'\r\nimport { state } from './state'\r\nimport * as actions from './actions'\r\nimport { onInitialize } from './onInitialize'\r\n\r\nconst config = {\r\n  onInitialize, \r\n  state, \r\n  actions\r\n}\r\n\r\ndeclare module 'overmind' {\r\n  // tslint:disable:interface-name\r\n  interface Config extends IConfig<typeof config> {}\r\n}\r\n\r\nexport const overmind = createOvermind(config)\r\nexport const useOvermind = createHook(overmind)","import { OnInitialize } from 'overmind'\r\n\r\nexport const onInitialize: OnInitialize = ({actions}) => {\r\n    actions.startNewGame()\r\n}","import * as React from 'react';\r\nimport { CardProps } from './Types'\r\nimport './Card.css'\r\nimport { CardState } from '../overmind/state';\r\nimport { useOvermind } from '../overmind';\r\n\r\nexport const Card: React.FunctionComponent<CardProps> = ({ card }) => {\r\n\r\n    const { actions } = useOvermind()\r\n    const { tryCard } = actions\r\n\r\n    if (card.state === CardState.Unrevelead){\r\n        return (\r\n            <div className=\"game-card game-card-back\" onClick={() => tryCard(card.id)}>\r\n                <img src={require(`../pictures/back.png`)} alt=\"\" className=\"img-fluid\" />\r\n            </div>\r\n        )\r\n    }\r\n    else if(card.state === CardState.Blocked){\r\n        return(\r\n            <div className=\"game-card game-card-back\">\r\n                 <img src={require(`../pictures/back.png`)} alt=\"\" className=\"img-fluid\"/>\r\n        </div>\r\n        )\r\n    }\r\n    else if(card.state === CardState.UnderVerification){\r\n        return (\r\n            <div className=\"game-card game-card-under-verification\">\r\n                <img src={require(`../pictures/${card.picturePath}`)} alt=\"\" className=\"img-fluid\"/>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <div className=\"game-card game-card-revealed\">\r\n               <img src={require(`../pictures/${card.picturePath}`)} alt=\"\" className=\"img-fluid\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport './Card.css'\r\nimport './RadioButton.css'\r\nimport { useOvermind } from '../overmind';\r\nimport { Dictionary } from '../overmind/state';\r\n\r\nexport const RadioButton: React.FunctionComponent<{ gameLevel: Dictionary<number> }> = ({ gameLevel }) => {\r\n\r\n    const { actions, state } = useOvermind()\r\n\r\n    const onRadioChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const number = event.target.value\r\n        actions.changeCardsNumber(parseInt(number));\r\n    }\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <label>\r\n                { gameLevel[\"1\"] }\r\n            <input type=\"radio\" name=\"cards-number\" value={gameLevel[\"1\"]} id=\"1\" className=\"form-radio\" onChange={onRadioChanged} checked={state.numberOfCards === gameLevel[\"1\"]}/>\r\n            </label>\r\n            <label>\r\n                {gameLevel[\"2\"]}\r\n                <input type=\"radio\" name=\"cards-number\" value={gameLevel[\"2\"]} id=\"2\" className=\"form-radio\" onChange={onRadioChanged} checked={state.numberOfCards === gameLevel[\"2\"]}/>\r\n            </label>            \r\n            <label>\r\n                {gameLevel[\"3\"]}\r\n                <input type=\"radio\" name=\"cards-number\" value={gameLevel[\"3\"]} id=\"3\" className=\"form-radio\" onChange={onRadioChanged} checked={state.numberOfCards === gameLevel[\"3\"]}/>\r\n            </label>            \r\n            <label>\r\n                {gameLevel[\"4\"]}\r\n                <input type=\"radio\" name=\"cards-number\" value={gameLevel[\"4\"]} id=\"4\" className=\"form-radio\" onChange={onRadioChanged} checked={state.numberOfCards === gameLevel[\"4\"]}/>\r\n            </label>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport './Panel.css'\r\nimport { RadioButton } from './RadioButton'\r\nimport { useOvermind } from '../overmind';\r\nimport { Dictionary } from '../overmind/state';\r\n\r\nexport const Panel: React.FunctionComponent<{ totalScore: number, gameLevel:Dictionary<number> }> = ({totalScore, gameLevel}) => {\r\n\r\n  useOvermind()\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"center\">\r\n        <div className=\"form-group col-md-12\">\r\n            <RadioButton gameLevel={gameLevel} />\r\n        </div>\r\n        <div className=\"form-group col-md-12\">\r\n          <input type=\"text\" readOnly className=\"input-score form-control-plaintext\" placeholder={`${totalScore} points`} />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}","import * as React from 'react';\r\nimport './App.css';\r\nimport { Card } from './components/Card'\r\nimport { Panel } from './components/Panel'\r\nimport { Provider } from 'overmind-react'\r\nimport { overmind, useOvermind } from './overmind/index'\r\n\r\nconst App = () => {\r\n\r\n  const { state } = useOvermind()\r\n  const { cards } = state\r\n\r\n  return (\r\n    <Provider value={overmind}>\r\n      <div className=\"container App\">\r\n      <img src={require(`./pictures/title.png`)} alt=\"\" className=\"img-responsive center\"/>\r\n        <Panel totalScore={state.totalScore} gameLevel={state.gameLevel} />\r\n        <div className=\"flex-container\">\r\n          { cards.map(card => <Card key={card.id} card={card} />) }\r\n        </div>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import  React from 'react';\r\nimport  ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\nif (module.hot) {\r\n    module.hot.accept();\r\n  }"],"sourceRoot":""}